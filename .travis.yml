dist: xenial
services: docker
language: python

env:
  global:
    - REGISTRY_USER=praekeltorgdeploy
    - secure: "ZFV2wqEl6E9y7ucpKOVR7+TJQoebwBUdWXHHPBWzdG42S8L1ZrG9Rf0ElJ30GLORCCeTVQdi2PVtyDbgmikaUnSdYdfckjMMh4UZWBXv9Bwt8jfnRiM86VOrtxdXWehqyc0euvErbop8o9sDrb6X1fLHaAHOEsqTRHqbiTpSiEm4Al08pMI6gWhuT9trHVMbTDAJKBi2t5Kj1rnMyTIF9KLpDd4o5ZF1dvh9EWO9IgFq6D9GjpIAHWRTd9/DILi8KhordB0Jq8wln5ZpLE4fZqwoeUyCspzXDKMDZcrHiSc8ijE4pFS4QFXuZmAqTJYTQmj8wl5jIm9vMD7nVWqzp/gLRsT96O5PrU/RFANgY10w7rB5zUlUE03dtmBhRX6SO8AZldppVSGben6nZ5X4d/GIwTGXz5hjyDDdvPEHx9eHY+bBV4vd4rQc6+jnUP2pq8TIMAmw/Gh7JzdzlokWZT6nK4fHxDqZeaOJGYnVxonu9MCmHVDu8loURut+m2v4SYLamKEsE0p3W2EkeoaEh7jR+KpMYyEZm3W1hMs430omY/Z9jikFTqxWfPIsB3JCGOgWYT7vTWm9UdT8yS8/Qg8s2wYLKGnpgQN1RVV4t82kHa2TXt/ZVP8XbkeJiBZBhMAMLpHYhg+6mzZt7WLOrClAruc2YAIa76/T0nS557o="
  matrix:
    - VERSION=7 TAG_LATEST= PYTHON_TAG=py2.7 PYTHON_LATEST=
    - VERSION=6 TAG_LATEST= PYTHON_TAG=py2.7 PYTHON_LATEST=
    - VERSION=5 TAG_LATEST=  PYTHON_TAG=py2.7 PYTHON_LATEST=
    - VERSION=4 TAG_LATEST=  PYTHON_TAG=py2.7 PYTHON_LATEST=
    - VERSION=6 TAG_LATEST= PYTHON_TAG=py3.6 PYTHON_LATEST=1
    - VERSION=7 TAG_LATEST= PYTHON_TAG=py3.6 PYTHON_LATEST=1
    - VERSION=8 TAG_LATEST=1 PYTHON_TAG=py3.6 PYTHON_LATEST=1

install: [] # Travis default is to install requirements.txt here; do not want

before_script:
  - image="$(awk '$1 == "FROM" { print $2; exit }' onbuild/Dockerfile)"
  - version="$(sed -nE 's/^molo\.core==(\S+).*/\1/p' "requirements/$VERSION.txt")"
  - cache_from="${image}:${VERSION}-${PYTHON_TAG}-onbuild"
  # Pull existing image to use as caches
  - docker pull "$cache_from" || true
script:
  # Use existing latest images as caches, with --pull to pull latest FROM image
  - docker build --pull --cache-from "$cache_from" --build-arg VERSION="$VERSION" -t "$image" .
  - docker build --cache-from "$cache_from" -t "${image}:onbuild" onbuild
after_script:
  - docker images

before_deploy:
  - pip install docker-ci-deploy==0.3.0
  - echo -n $REGISTRY_PASS | docker login --username "$REGISTRY_USER" --password-stdin
deploy:
  - provider: script
    script: dcd --tag "$PYTHON_TAG" ${PYTHON_LATEST:+""} --version "$version" --version-semver ${TAG_LATEST:+--version-latest} "$image"
    on:
      branch: master
  - provider: script
    script: dcd --tag "$PYTHON_TAG-onbuild" ${PYTHON_LATEST:+onbuild} --version "$version" --version-semver ${TAG_LATEST:+--version-latest} "${image}:onbuild"
    on:
      branch: master
